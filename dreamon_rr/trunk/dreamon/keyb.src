/***************************************************************************
 *   Copyright (C) 2000 - 2006 by Christoph Thelen                         *
 *   DocBacardi@the-dreams.de                                              *
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 *   This program is distributed in the hope that it will be useful,       *
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
 *   GNU General Public License for more details.                          *
 *                                                                         *
 *   You should have received a copy of the GNU General Public License     *
 *   along with this program; if not, write to the                         *
 *   Free Software Foundation, Inc.,                                       *
 *   59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             *
 ***************************************************************************/


;--------------------------------------


	.(	;** KeyBoard **

;--------------------------------------

@0KeyB_GetKey:
	lda FKeysBSS_MacroStackPos		;Playing Macro?
	bne GetKeyMac0
	sei					;Get Key
	lda KeyBZp_Flag
	ldx #0
	stx KeyBZp_Flag
	ldx KeyBZp_Key
	cli
	cmp #$80
	bpl GetKeyMac1				;Is Key F16?
	cpx #Key_F16
	bne GetKeyMac1
	lda FKeysBSS_RecordKey			;Already Recording
	bne GetKeyMac1
	jsr ComLibVect_CursorBlinkFast		;Show we are in Record Mode
	dec FKeysBSS_RecordKey			;= $ff, Block interpretation of FKeys in IRQ
GetKeyWho:
;No need to wait for the irq
;	cli					;Wait for FKey to Record. Ignore other Keys
;	wai,xyz					;Wait for Next IRQ -> new Key
;	sei
	bit KeyBZp_Flag
	bpl GetKeyWho				;No Special Key means No FKey
	lda KeyBZp_Key
	cmp #Key_F15+1				;Is FKey 1 to 15?
	bcs GetKeyWho
	sbc #Key_F1-1-1				;Carry Clear
	beq GetKeyWho
	bcc GetKeyWho
	sta FKeysBSS_RecordKey			;1 to 15 for FKeys
	ldy #0
	sty KeyBZp_Flag
;	cli	
	tay
	jsr FKeys_SearchText
	lda CRTRamBSS_Buffer
	sta FKeysBSS_OldKeyLen
	lda CRTRamBSS_Buffer+1
	sta FKeysBSS_OldKeyLen+1
	lda #KeyBFlag_KeySpi
	sta FKeysBSS_RecFlags
	lda #0					;No Flags -> No Keys
	beq GetKeyMac2				;Do not Record this Key

GetKeyMac0:
	jsr KeyB_CheckStop
	bne GetKeyMacBreak
	jsr FKeys_GetChar
;	jmp GetKeyMac1
GetKeyMac1:
	ldy FKeysBSS_RecordKey
	beq GetKeyMac2
	cmp #$40				;Flags for Normal and Spi >= $40, <$40 means no key pressed
	bcc GetKeyMac2				;No Keys, dann auch nichts Aufnehmen
	jsr FKeys_PutChar
GetKeyMac2:
	ora #%00100000
	pha
	txa
	plp
	rts

GetKeyMacBreak:
	lda StringBufZp_End
	sta StringBufZp_TempEnd
	lda StringBufZp_End+1
	sta StringBufZp_TempEnd+1
	jsr ComLibVect_CursorBlinkNorm
	lda #0
	sta FKeysBSS_MacroStackPos		;Macro Replay off
	sta FKeysBSS_RecordKey			;Macro Record off
	beq GetKeyMac2

;--------------------------------------

@0KeyB_CheckStop:
	lda KeyBZp_Flag
	pha
	and #$ff-KeyBFlag_Stop
	sta KeyBZp_Flag
	pla
	and #KeyBFlag_Stop
	rts

;--------------------------------------

	.(	;** AutoKeys **

@0KeyB_AutoKeys:
	lda KeyBZp_Flag
	and #$ff-KeyBFlag_NoScroll
	sta KeyBZp_Flag

	bit KeyBZp_Flag
	bmi AutoSpiKey
	bvc NoKey
	rts

NoKey:
	lda KeyBZp_Qualifier
	and #$10
	beq NoKey0
	lda KeyBZp_Flag
	ora #KeyBFlag_NoScroll
	sta KeyBZp_Flag
NoKey0:
	rts

AutoSpiKey:
	lda KeyBZp_Key
	cmp #Key_Stp
	bne SpiNoStop
	lda KeyBZp_Flag
	ora #KeyBFlag_Stop
	sta KeyBZp_Flag
End2:
	rts
SpiNoStop:
	lda FKeysBSS_MacroStackPos
	bne End2
	lda KeyBZp_Key
@0KeyB_AutoKeysFKeys:
	ldx #0
	cmp #Key_NMa
	beq SpiNMa
	cmp #Key_DMa
	beq SpiDMa
	cmp #Key_PMa
	bne Spi_NoDNPMa
	inx
SpiDMa:
	inx
SpiNMa:
/*
	jmp Prefs_SetMappingMode
*/
	inc $d020	;DEBUG
	rts		;DEBUG

Spi_NoDNPMa
	cmp #Key_MSi
	bne SpiNoMSi
	lda #$20
	bne SpiXSiIn0
SpiNoMSi:
	cmp #Key_XSi
	bne SpiNoXSi
	lda #$10
SpiXSiIn0:
	eor Intern_MX
	sta Intern_MX
	rts
SpiNoXSi:
	cmp #Key_139+1
	bcs SpiNo1
	cmp #Key_130
	bcc SpiNo1
	sbc #Key_130
	ora #$30
	sta Intern_01
	rts
SpiNo1:
	cmp #Key_Rep
	bne SpiNoRep
	lda #OptionFlag_FollowXep
	bne SpiSetOption
SpiNoRep:
	cmp #Key_VHu
	bne SpiNoVHu
	lda #OptionFlag_Verbose
SpiSetOption:
	eor OptionFlags
	sta OptionFlags
	rts
SpiNoVHu:
	cmp #Key_CSh
	bne SpiNoCSh
	jmp ComLibVect_SwitchCharsets
SpiNoCSh:
	cmp #Key_Map
	bne SpiNoMMap
	lda OptionFlags
	eor #OptionFlag_MMap
	sta OptionFlags
	jmp ComLibVect_SetDebugBorder
SpiNoMMap:
	; ** FKey Stuff **
	ldy FKeysBSS_RecordKey
	bmi SpiNoFKeys			;FKeys Blocked
	cmp #Key_F15+1			;F16 is reserved for Macro-Rec
	bcs SpiNoFKeys
	cmp #Key_F1
	bcc SpiNoFKeys
	sbc #Key_F1-1

	cmp FKeysBSS_RecordKey		;End for Macro-Record?
	bne SpiNoEndOfMacro
	jmp FKeys_TempBufToFKey

SpiNoEndOfMacro:
	tay

	ldx FKeysBSS_MacroStackPos
	cpx #$11
	bcs End
	sta FKeysBSS_MacroStackNr,x	;Macro No.
	lda #1
	sta FKeysBSS_MacroStackLo,x
	lda #0
	sta FKeysBSS_MacroStackHi,x	;Macro Pos
	inc FKeysBSS_MacroStackPos
	lda #KeyBFlag_KeySpi
	sta FKeysBSS_Flags
SpiNoFKeys:
End:
	rts

	.)	;** AutoKeys **

;--------------------------------------
; Fragt Keyboard ab und setzt KeyBZp_Key
; KeyBZp_Flag und KeyBZp_Qualifier
;--------------------------------------


@0KeyB_ScanKeys:
	lda #0
	sta KeyBZp_Attr
	sta KeyBZp_Qualifier
	sta $dc00
	jsr KeyBEntprell
	clc
	adc #1
	beq KeyBNoKeys
	ldx #3
KeyB0:
	lda KeyBTab0,x
	sta $dc00
	jsr KeyBEntprell
	and KeyBTab1,x
	bne KeyB1
	lda KeyBTab2a,x
	ora KeyBZp_Attr
	sta KeyBZp_Attr
	lda KeyBTab2b,x
	ora KeyBZp_Qualifier
	sta KeyBZp_Qualifier
KeyB1:
	dex
	bpl KeyB0

	ldx #8
KeyB2:
	lda KeyBTab3-1,x
	sta $dc00
	jsr KeyBEntprell
	ora KeyBTab4-1,x
	ldy #7
KeyB3:
	asl
	bcc KeyB4
	dey
	bpl KeyB3
	dex
	bne KeyB2
	txa
	tay
KeyB4:
	tya
	ora KeyBTab5,x
	tay
	ldx #$ff
	stx $dc00
	cmp #$40
	bne KeyB9
	lda KeyBZp_Attr
KeyB9:
	cmp KeyBZp_Pressed
	bne KeyB8
	ldx KeyBZp_RepeatCnt
	bmi KeyB6
	dex
	jmp KeyBDelay

KeyBNoKeys:
	ldx KeyBZp_InitRepeatVal
	lda #$40
	sta KeyBZp_Pressed
KeyBDelay:
	stx KeyBZp_RepeatCnt
	lda KeyBZp_Flag
	and #$ff-(KeyBFlag_KeyNrm|KeyBFlag_KeySpi)
	sta KeyBZp_Flag
	rts

KeyB6:
	inx
	bmi KeyBDelay
	ldx KeyBZp_RepeatVal
	stx KeyBZp_RepeatCnt
KeyB8:
	sta KeyBZp_Pressed
	ldx KeyBZp_Attr
	lda KeyBTab6,x			;KeyMaps Lo
	sta KeyBZp_Ptr
	lda KeyBTab7,x			;KeyMaps Hi
	sta KeyBZp_Ptr+1
	lda (KeyBZp_Ptr),y
	cmp #Key_No
	beq KeyBNoKeys
	sta KeyBZp_Key
	tya
	and #7
	tax
	tya
	lsr
	lsr
	lsr
	clc
	adc #$41
	tay
	lda (KeyBZp_Ptr),y
KeyBTestSpi0:
	asl
	dex
	bpl KeyBTestSpi0
	lda KeyBZp_Flag
	and #$ff-(KeyBFlag_KeyNrm|KeyBFlag_KeySpi)
	ora #KeyBFlag_KeyNrm
	bcc KeyBTestSpi1
	eor #KeyBFlag_KeyNrm|KeyBFlag_KeySpi
KeyBTestSpi1:
	sta KeyBZp_Flag
	rts

KeyBEntprell:
	lda $dc01
	cmp $dc01
	bne KeyBEntprell
	rts

;60 Keys + 4 Attrib

;	   Ctrl,C  ,RSh,LSh
KeyBTab0:
	.DB $7f,$7f,$bf,$fd
KeyBTab1:
	.DB $04,$20,$10,$80
KeyBTab2a:
	.DB $01,$02,$04,$04
KeyBTab2b:
	.DB $10,$20,$40,$80


KeyBTab3:
	.DB $7f,$bf,$df,$ef,$f7,$fb,$fd,$fe
KeyBTab4:
	.DB $24,$10,$00,$00,$00,$00,$80,$00
KeyBTab5:
	.DB $40,$38,$30,$28,$20,$18,$10,$08,$00

;--------------------------------------


KeyBTab6:
	.DB <KeyMap_Normal		;No
	.DB <KeyMap_Ctrl		;Ctrl
	.DB <KeyMap_C			;	C
	.DB <KeyMap_Ctrl		;Ctrl & C
	.DB <KeyMap_Shift		;	    Shift
	.DB <KeyMap_ShiftCtrl   	;Ctrl &     Shift
	.DB <KeyMap_ShiftC		;	C & Shift
	.DB <KeyMap_ShiftC		;Ctrl & C & Shift
KeyBTab7:
	.DB >KeyMap_Normal		;No
	.DB >KeyMap_Ctrl		;Ctrl
	.DB >KeyMap_C			;	C
	.DB >KeyMap_Ctrl		;Ctrl & C
	.DB >KeyMap_Shift		;	    Shift
	.DB >KeyMap_ShiftCtrl		;Ctrl &     Shift
	.DB >KeyMap_ShiftC		;	C & Shift
	.DB >KeyMap_ShiftC		;Ctrl & C & Shift

;--------------------------------------


KeyMap_Normal:
	.SCR Key_BSp,Key_CR ,Key_CRi,Key_F7 ,Key_F1 ,Key_F3 ,Key_F5 ,Key_CDo
	.SCR '3'	   ,'w'	   ,'a'	   ,'4'	   ,'z'	   ,'s'	   ,'e'	   ,Key_No
	.SCR '5'	   ,'r'	   ,'d'	   ,'6'	   ,'c'	   ,'f'	   ,'t'	   ,'x'
	.SCR '7'	   ,'y'	   ,'g'	   ,'8'	   ,'b'	   ,'h'	   ,'u'	   ,'v'
	.SCR '9'	   ,'i'	   ,'j'	   ,'0'	   ,'m'	   ,'k'	   ,'o'	   ,'n'
	.SCR '+'	   ,'p'	   ,'l'	   ,'-'	   ,'.'	   ,':'	   ,'@'	   ,','
	.SCR $1c	   ,'*'	   ,';'	   ,Key_Hme,Key_No ,'='	   ,$1e	   ,'/'
	.SCR '1'	   ,$1f	   ,Key_No ,'2'	   ,' '	   ,Key_No ,'q'	   ,Key_Stp
	.SCR Key_No

	.DB %10111111
	.DB %00000000
	.DB %00000000
	.DB %00000000
	.DB %00000000
	.DB %00000000
	.DB %00010000
	.DB %00000001
	.DB %00000000

KeyMap_Shift:
	.SCR Key_Ins,Key_SRe,Key_CLe,Key_F8 ,Key_F2 ,Key_F4 ,Key_F6 ,Key_CUp
	.SCR '#'	   ,'W'	   ,'A'	   ,'$'	   ,'Z'	   ,'S'	   ,'E'	   ,Key_No
	.SCR '%'	   ,'R'	   ,'D'	   ,'&'	   ,'C'	   ,'F'	   ,'T'	   ,'X'
	.SCR $27	   ,'Y'	   ,'G'	   ,'('	   ,'B'	   ,'H'	   ,'U'	   ,'V'
	.SCR ')'	   ,'I'	   ,'J'	   ,'0'	   ,'M'	   ,'K'	   ,'O'	   ,'N'
	.SCR $5b	   ,'P'	   ,'L'	   ,$5d	   ,'>'	   ,'['	   ,$7a	   ,'<'
	.SCR $69	   ,$40	   ,']'	   ,Key_Clr,Key_No ,'='	   ,$5e	   ,'?'
	.SCR '!'	   ,$1f	   ,Key_No ,$22	   ,' '	   ,Key_No ,'Q'	   ,Key_Run
	.SCR Key_No

	.DB %11111111
	.DB %00000000
	.DB %00000000
	.DB %00000000
	.DB %00000000
	.DB %00000000
	.DB %00010000
	.DB %00000001
	.DB %00000000

KeyMap_C:
	.SCR Key_BSp	,Key_CR		,Key_CRi	,Key_F15	,Key_F9		,Key_F11	,Key_F13	,Key_CDo
	.SCR Key_C10	,$73		,$70		,Key_C11	,$6d		,$6e		,$71		,Key_No
	.SCR Key_C12	,$72		,$6c		,Key_C13	,$7c		,$7b		,$63		,$7d
	.SCR Key_C14	,$77		,$65		,Key_C15	,$7f		,$74		,$78		,$7e
	.SCR '9'	,$62		,$75		,'0'		,$67		,$61		,$79		,$6a
	.SCR $66	,$6f		,$76		,$5c		,'>'		,'['		,$64		,'<'
	.SCR $68	,$5f		,']'		,Key_Hme	,Key_No		,'='		,$5e		,'?'
	.SCR Key_C8	,$1f		,Key_No		,Key_C9		,' '		,Key_No		,$6b		,Key_Stp
	.SCR Key_No

	.DB %10111111
	.DB %10010000
	.DB %10010000
	.DB %10010000
	.DB %00000000
	.DB %00000000
	.DB %00010000
	.DB %10010001
	.DB %00000000

KeyMap_ShiftC:
	.SCR Key_Ins	,Key_SRe	,Key_CLe	,Key_F8		,Key_F2		,Key_F4		,Key_F6		,Key_CUp
	.SCR '#'	,'W'		,'A'		,'$'		,'Z'		,'S'		,'E'		,Key_No
	.SCR '%'	,'R'		,'D'		,'&'		,'C'		,'F'		,'T'		,'X'
	.SCR $27	,'Y'		,'G'		,'('		,'B'		,'H'		,'U'		,'V'
	.SCR ')'	,'I'		,'J'		,'0'		,'M'		,'K'		,'O'		,'N'
	.SCR '+'	,'P'		,'L'		,'-'		,'.'		,'['		,$40		,','
	.SCR $1c	,'*'		,']'		,Key_Clr	,Key_No		,'='		,$1e		,'/'
	.SCR '!'	,$1f		,Key_No		,$22		,' '		,Key_No		,'Q'		,Key_Run
	.SCR Key_CSh

	.DB %11111111
	.DB %00000000
	.DB %00000000
	.DB %00000000
	.DB %00000000
	.DB %00000000
	.DB %00010000
	.DB %00000001
	.DB %10000000

KeyMap_Ctrl:
	.SCR Key_Del	,Key_CR		,Key_SRi	,Key_F16	,Key_F10	,Key_F12	,Key_F14	,Key_SDo
	.SCR Key_C2	,'w'|$80	,'a'|$80	,Key_C3		,'z'|$80	,'s'|$80	,'e'|$80	,Key_No
	.SCR Key_C4	,'r'|$80	,'d'|$80	,Key_C5		,'c'|$80	,'f'|$80	,'t'|$80	,'x'|$80
	.SCR Key_C6	,'y'|$80	,'g'|$80	,Key_C7		,'b'|$80	,'h'|$80	,'u'|$80	,'v'|$80
	.SCR Key_ROn	,'i'|$80	,'j'|$80	,Key_ROf	,'m'|$80	,'k'|$80	,'o'|$80	,'n'|$80
	.SCR '+'	,'p'|$80	,'l'|$80	,'-'		,'.'		,':'		,$80		,','
	.SCR $1c	,'*'		,';'		,Key_Hme	,Key_No		,'='		,$1e		,'/'
	.SCR Key_C0	,$1f		,Key_No		,Key_C1		,' '		,Key_No		,'q'|$80	,Key_Stp
	.SCR Key_No

	.DB %10111111
	.DB %10010000
	.DB %10010000
	.DB %10010000
	.DB %10010000
	.DB %00000000
	.DB %00010000
	.DB %10010001
	.DB %00000000

KeyMap_ShiftCtrl:
	.SCR Key_Del	,Key_CR		,Key_SLe	,Key_F16	,Key_F10	,Key_F12	,Key_F14	,Key_SUp
	.SCR Key_133	,'w'|$80	,'a'|$80	,Key_134	,'z'|$80	,'s'|$80	,'e'|$80	,Key_No
	.SCR Key_135	,'r'|$80	,Key_DMa	,Key_136	,Key_ELi	,Key_Rep	,'t'|$80	,Key_XSi
	.SCR Key_137	,'y'|$80	,'g'|$80	,Key_138	,'b'|$80	,Key_VHu	,'u'|$80	,Key_Vid
	.SCR Key_139	,Key_ILi	,'j'|$80	,Key_130	,Key_MSi	,Key_KLi	,'o'|$80	,Key_NMa
	.SCR Key_VSU	,Key_PMa	,'l'|$80	,Key_VSD	,'.'		,':'		,$c0		,','
	.SCR $1c	,'*'		,';'		,Key_Hme	,Key_No		,'='		,$1e		,'/'
	.SCR Key_131	,Key_Map	,Key_No		,Key_132	,' '		,Key_No		,'q'|$80	,Key_Stp
	.SCR Key_No

	.DB %10111111
	.DB %10010000
	.DB %10111101
	.DB %10010101
	.DB %11011101
	.DB %11010000
	.DB %00010000
	.DB %11010001
	.DB %00000000

;--------------------------------------


	.)	;** KeyBoard **

























