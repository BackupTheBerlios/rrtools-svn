DreamLoad 2.7
=============

[[chap_Preface,Preface]]
== Preface ==
DreamLoad is a 2 bit IRQ fastloader for a lot of different drives.

.Supported Drives:
* 1541 and compatible
* 1570/71 (native)
* 1581
* cmd fd
* cmd hd
* mmc64

.Some Goodies:
* works on pal and ntsc machines
* supports double sided disks on the 1571
* loads from sub-partitions on the 1581 and sub-directories on cmd fd and hd
* detects disk changes without ignoring id mismatch errors
* recognizes illegal tracks and sectors
* uses full 16-char filenames, supports joker ("*","?")
* can directly load from a track/sector
* can be temporarily disabled
* the device number can be 8 to 30
* easy to combine with levelpackers
* open source (happy hacking :)

....and some flaws:
* It can only work with one drive on the serial line as it uses ATN for handshake. So please be sure to turn off all drives except the one you want to work with.
* Of course, 1541/70/71 loading speed depends on the sector interleave.


This text describes V2.7. You can find our plans for the future in <<chap_ToDo,ToDo>>. How to assemble DreamLoad, describes how to build your own customized version of DreamLoad. A summary of all provided routines can be found in Using DreamLoad. All chapters are listed in the Index.


DreamLoad is quite stable but though still under development. So if you find any bugs or have nice ideas please contact us:

* mailto:DocBacardi@the-dreams.de[Doc Bacardi]
* mailto:ninja@the-dreams.de[Ninja]


These are the tools we use to develop DreamLoad:

* the crossassembler http://developer.berlios.de/project/showfiles.php?group_id=7602[DreamAss],
* the development environment http://setedit.sourceforge.net[SetEdit],
* the FreeType version of jam, http://freetype.sourceforge.net/jam/[ftjam],
* http://www.ktverkko.fi/~msmakela/8bit/cbmconvert/index.en.html[cbmconvert] by Marko Mäkelä,
* http://hem.bredband.net/magli143/exo[exomizer] by Magnus Lind,
* http://www.cs.tut.fi/~albert/Dev/pucrunch[pucrunch] by Pasi Ojala


Doc Bacardi and Ninja

----------------------------------------------------------------------------
      ______              ______              ___________               
    __\     \    ______ __\     \    ______ __\          \    ______    
   /\  \_____\ __\     \   \_____\ __\     \   \__________\ __\     \   
  /  \__\__   \_  \_____\ __\__   \_  \_____\ __\_______   \_  \_____\  
 /   /    /    /\__\__   \_   /____/\__\__   \_   /    /    /\__\__   \_
/   /    /    / /   _/    /  ___/_  /   _/    /  /    /    / /    /____/
\  /    /    / /    \____/  /    / /    \    /  /    /    / /\___    \  
 ./_________/ /    /    /_______/ /    /    /__/____/    /\/    /    /  
            \/____/    /        \/____/    /      \/_____\ \________/   
                \/_____\            \/_____\                            
             cRu/1oo                                                    
               .                       http://www.the-dreams.de
----------------------------------------------------------------------------


== How to get DreamLoad ==

The latest source can be found on the BerliOS RRTools download page: http://developer.berlios.de/project/showfiles.php?group_id=7602[]. For more info please visit the homepage (http://rrtools.berlios.de[]) or the project page (http://developer.berlios.de/projects/rrtools[]).

TIP: From time to time the http access on BerliOs is broken. Please try https instead by replacing "http" with "https" in above urls.


== General overview ==

DreamLoad consists of 3 parts. The first one is the installer (the file you get by assembling the sources). It determines what type of drive is connected to the C64. According to this, the installer transfers the second part of the loader; the code which runs in the drive. It is immediately started. Finally the installer copies the loader code running on the C64 to a defined memory location. The loader can be used immediately after installing it. There's no need for a delay loop afterwards.

As you see, the drive-detection is done during run-time, meaning your production can be file-copied to any supported drive and will still work without any modification of the program.


== How to assemble DreamLoad ==

Although we provide preassembled binaries we recommend building your own version. The DreamLoad source can be customized in a few steps for you special needs.


=== Build Tools ===

To build DreamLoad you need several tools. Some of them are marked as *optional*. They are only used to build the examples or the documentation (which can all be downloaded separately). To build a custom version of DreamLoad you only need the tools marked with *required*.

.DreamLoad Build Tools
`-----------.-----------`-------------------------------------------------------------------------
DreamAss    *required*  http://developer.berlios.de/project/showfiles.php?group_id=7602[]
                        assembler for the DreamLoad sources
ftjam       *required*  http://freetype.sourceforge.net/jam/[]
                        build system for the DreamLoad project
asciidoc    optional    http://www.methods.co.nz/asciidoc/[]
                        generates the documentation
cbmconvert  optional    http://www.ktverkko.fi/~msmakela/8bit/cbmconvert/index.en.html[]
                        builds the disk, lynx and dfi images for all examples
exomizer    optional    http://hem.bredband.net/magli143/exo[]
                        generates the compressed data for the decrunch and decrunch_link examples
pucrunch    optional    http://www.cs.tut.fi/~albert/Dev/pucrunch[]
                        generates the compressed data for the decrunch and decrunch_link examples
rar         optional    http://www.rarlabs.com/index.htm[]
                        generate backup and distribution archives
--------------------------------------------------------------------------------------------------


[[chap_customizing_dreamload]]
== Customizing DreamLoad ==
Grab your favourite editor and open the "dload.cfg" file in the "user_cfg" folder.

TIP: The "demo" folder contains a lot of examples for different configurations.


=== Config File Version ===

The configuration file comes with a version number. It will change when more options appear in future versions of DreamLoad or some other differences render older configuration files incompatible. The version number is meant as a helper and not as a restriction. With it's help the build process can generate a clear errormessage (see below) for out-of-date config files instead of a lot of cryptic output.

.Build output for an out of date config file
-----------------------------------------------------------------------------
Using C64 toolset
...found 22 target(s)...
...updating 1 target(s)...
DreamAss user_cfg/dload.prg
dload.src:16: error:"Update your LdConfig!"
-----------------------------------------------------------------------------

If you see this errormessage, please take a look at the changelog for upgrade instructions. It is included in the new distribution and also available on the DreamLoad download page.

If the upgrade instructions are not available for any reason, please follow these steps:

. Backup your old configuration file.
. Take the "dload.cfg" file from the new DreamLoad distribution.
. Move the values from your old configuration file to the new one. Please check this documentation for changes at existing options.
. Set the values for any new config options according to this manual.

Do not worry, the config file does not change very often and it has only a few lines.

.The config file version number
-----------------------------------------------------------------------------
; Config Version
LdCfgVer                = $0207
-----------------------------------------------------------------------------


=== Installer ===

==== Installer Location ====
The option ++LdCfgInit_CodeStart++ defines both the load and the execution address of the installer. This means the first byte will be at ++LdCfgInit_CodeStart++ and a ++jsr LdCfgInit_CodeStart++ will execute it.

-----------------------------------------------------------------------------
LdCfgInit_CodeStart = $8000
-----------------------------------------------------------------------------

The installer uses kernel routines and of course I/O at ++$DD00++ for the drive communication. The code can be placed anywhere in the range from ++$0340++ to ++$D000++. Please note that ++LdCfgInit_CodeStart++ defines the start address, i.e. setting it to ++$CFFF++ is a bad idea.

TIP: The size of the installer and thus the end address depends on the configuration options. A rough estimation is ++$1000++ bytes.

==== Installer Zeropage space ====
The installer needs 7 zeropage adresses. They are used only temporarily and can be overwritten after the installer is done.

This line specifies where the 7 bytes are placed. ++$40++ means the zeropage adresses from ++$40++ to ++$46++ are used.

-----------------------------------------------------------------------------
LdCfgInit_ZPStart = $40
-----------------------------------------------------------------------------

==== Installer Vic Bank ====
The next entry defines which vic bank is displayed while the installer runs.

It's a number from 0 to 3, the same you would store to ++$DD00++.

-----------------------------------------------------------------------------
        lda #%......xy
        sta $DD00
-----------------------------------------------------------------------------

The default value is 3 which selects vic bank 0 (++$0000++-++$3fff++).

-----------------------------------------------------------------------------
LdCfgInit_VicBank          = 3
-----------------------------------------------------------------------------


=== Loader ===

[[cfg_LdFlag_OpenGetInterface,LdFlag_OpenGetInterface]]
==== Choosing the Loader Interface ====
Dreamload offers 2 ways to access files. The Load/LoadTS interface can load a complete file or separate sectors.
The Open/Get interface can access a file byte-by-byte, just like the open and get routines of the c64's basic.

NOTE: The interfaces are mutually exclusive, you can only choose one.

If you want to use the Open/Get interface instead of Load/LoadTS, remove the
leading semicolon from this line:

-----------------------------------------------------------------------------
;LdFlag_OpenGetInterface = 1
-----------------------------------------------------------------------------

TIP: Please take a look at the "demo/decrunch_..." examples. All of them use the Open/Get interface. For an example on the Load/LoadTS interface, please see "demo/simple".


==== Keep Startaddress ====
If you need to keep the startadress of the loaded file in a zeropage adress, remove the leading semicolon in this line:

-----------------------------------------------------------------------------
;LdFlag_RememberStart = 1
-----------------------------------------------------------------------------

NOTE: This flag is only valid for the Load/LoadTS interface and has no meaning for the Open/Get interface. Please see <<cfg_LdFlag_OpenGetInterface,LdFlag_OpenGetInterface>> for details.


==== Set $DD02 ====
DreamLoad uses a little trick to keep the bits for the vic bank out of ++$dd00++. They are controlled by ++$dd02++ now.

You can initialize ++$dd00++ and have DreamLoad set ++$dd02++ to the right value. This is the default action.

But this will not work if you need to change the vic bank during loading. In this case you have to set ++$dd02++ on your own and prepend a semicolon to this line:

-----------------------------------------------------------------------------
LdFlag_SetDD02 = 1
-----------------------------------------------------------------------------

Example for setting ++$dd02++:

-----------------------------------------------------------------------------
        lda #%......xy
        sta $dd00
-----------------------------------------------------------------------------

becomes

-----------------------------------------------------------------------------
        lda #0                  ;only once in your init routine
        sta $dd00               ;don't do this while loading

        lda #($3f EOR %xy)      ;the new substitute for setting the vic
        sta $dd02               ;bank to %xy
-----------------------------------------------------------------------------

TIP: Please take a look at the example in the "demo/irq" folder. It changes the VIC bank while loading.


==== Preset Load Address ====
By default the loader takes the first two bytes of a file as the loading adress.

If you remove the leading semicolon of the following line, DreamLoad checks the zero page location ++LdZp_PresetAE++.

-----------------------------------------------------------------------------
;LdFlag_PresetAE = 1
-----------------------------------------------------------------------------

If the value in ++LdZp_PresetAE++ is positive (++$00++ to ++$7f++) the loading adress is taken from the file like
described above.

If it is negative (++$80++ to ++$ff++) the loading adress is taken from the zero page location ++LdLAE++.

NOTE: This flag is only valid for the Load/LoadTS interface and has no meaning for the Open/Get interface. Please see <<cfg_LdFlag_OpenGetInterface,LdFlag_OpenGetInterface>> for details.

==== Load below I/O ====
To speed up the code loading below I/O is not supported by default. Remove the leading semicolon in this line to enable loading from ++$d000++ to ++$e000++:

-----------------------------------------------------------------------------
;LdFlag_LoadBelowIO = 1
-----------------------------------------------------------------------------

WARNING: When you enable this function, please take care of the following: DreamLoad will then change the memory-config often while loading. So, make sure that your interrupts backup and restore ++$01++!

NOTE: This flag is only valid for the Load/LoadTS interface and has no meaning for the Open/Get interface. Please see <<cfg_LdFlag_OpenGetInterface,LdFlag_OpenGetInterface>> for details.


==== Treat 1571 like 1541 ====
For some applications it is more important to save some bytes than getting the best loading speeds.
Remove the leading semicolon in this line to use the 1541 speeder for both 1570 and 1571 drives.
This saves about 320 bytes for the installer.

NOTE: The memory usage after the installer does not depend on this option.

-----------------------------------------------------------------------------
;LdFlag_7Xis41 = 1
-----------------------------------------------------------------------------


==== Loader Memory Locations ====
The next options define the memory locations to use, which can also be changed to your own needs, of course.

===== LdLAE =====
In the first place these 2 bytes are temporary work space for DreamLoad. Temporary means in this case during one complete Load operation or all Open/Get operations to one file.

For the Load/LoadTS interface ++LdLAE++ has two more functions:

* It can be used to pass the loading adress to DreamLoad and
* it contains the last used adress +1 after a successful load.


.Load Pointer
-----------------------------------------------------------------------------
LdLAE                  = $ae
-----------------------------------------------------------------------------

===== LdLC1 =====
If you chose the Load/LoadTS interface, enabled the flag ++LdFlag_RememberStart++ and the loading adress is taken from the file, the loading adress is put into this zero page location.

It uses 2 bytes. It is not used or modified if the loading adress is taken from ++LdLAE++.

.Saved Startaddress
-----------------------------------------------------------------------------
LdLC1                  = $c1
-----------------------------------------------------------------------------

NOTE: The 2 bytes at ++LdLC1++ and ++LdLC1+1++ are only used by the Load/LoadTS interface. The Open/Get interface leaves them untouched. Please see <<cfg_LdFlag_OpenGetInterface,LdFlag_OpenGetInterface>> for details.


===== LdGZp and LdChk =====
DreamLoad needs two bytes of workspace. They can be located anywhere in the
zeropage. They do not need to be together.

.Zeropage workspace
-----------------------------------------------------------------------------
LdGZp                  = $02
LdChk                  = $57
-----------------------------------------------------------------------------

===== LdBf =====
To load a sector, a buffer of 256 bytes is needed. It should begin at the
start of a page.

.Start of the sector buffer
-----------------------------------------------------------------------------
LdBf                   = $0400
-----------------------------------------------------------------------------

===== LdLoc =====
The loader code is max. 2 pages (512 bytes) long. It will be copied to ++LdLoc++.

WARNING: ++LdLoc++ must not be placed from ++$d000++ to ++$e000++ as the code must access the CIA2 regs at ++$DD00++. Furthermore ++LdLoc++ must not overlap with the installer.

.Start of the 2 pages loader code
-----------------------------------------------------------------------------
LdLoc                   = $0500
-----------------------------------------------------------------------------


=== Building DreamLoad ===

If you are lucky and have ++ftjam++ on your system just type ++jam user++ in the directory containing the DreamLoad sources.
Otherwise

-----------------------------------------------------------------------------
dreamass -o dload.prg dload_si.src
-----------------------------------------------------------------------------

will do the same.

The produced binary will be called 'dload.prg'.

Please refer to chapter <<chap_win_build,Step by step build instructions or windows>> for step by step build instructions for windows.


.Overview of all jam targets
`--------------------------------------------`-------------------------------------------------------------
++jam++                                      Build all targets.
++jam clean++                                Delete all produced files.
++jam user++                                 Build dload with the config found in the directory ++user_cfg++.
++jam docs++                                 Build all docs.
++jam docs_clean++                           Remove all produced docs.
++jam sim++'<drive><videonorm>'++:++'<test>' Run test in vice (see below for options).
++jam backup++                               Create a backup archive of all files in the configured directory 'ARCDIR'. The filename consists of the project name and a date/time stamp.
++jam distrib++                              Create a distribution archive of the project files ('PROJECT_FILES') in the configured directory 'ARCDIR'. The filename consists of the project name and a date stamp.
-----------------------------------------------------------------------------------------------------------


==== The sim target ====

The ++sim++ target runs one of the images in the demo folder with the vice emulator. It has 3 options: drive, videonorm and the test. The ++drive++ parameter selects the type of the diskdrive which will be used in the test, ++videonorm++ chooses between pal and ntsc and the ++test++ parameter is the name of one of the subfolders in the "demo" folder.

.Possible values for the drive option
`--------`---------------------------
41       1541
70       1570
71       1571
81       1581
-------------------------------------

.Possible values for the videonorm option
`--------`-------------------------------
n        NTSC
p        PAL
-----------------------------------------

.Run the decrunch_abcruncher20 demo with 1581 on a pal system
-----------------------------------------------------------------------------
jam sim81p:decrunch_abcruncher20
-----------------------------------------------------------------------------



[[chap_win_build]]
==== Step by step build instructions or windows ====

- Download the dreamload source and extract it to a new folder. Change to the folder which contains the file "Jamrules". This is the dreamload root folder.
  http://developer.berlios.de/project/showfiles.php?group_id=7602[]
- Download the dreamass executable and copy "dreamass.exe" to the dreamload root folder.
  http://developer.berlios.de/project/showfiles.php?group_id=7602[]
- Download ftjam and copy the jam.exe to the dreamload root folder.
  http://freetype.sourceforge.net/jam/[]
- Edit the file "dload.cfg" in the folder "user_cfg" according to chapter <<chap_customizing_dreamload,Customizing Dreamload>>.
- Open a command prompt and change to the dreamload root folder. Execute the command ++jam user++. The folder "user_cfg" will contain the dreamload installer "dload.prg".


=== Modifying DreamLoad ===

If you want to make your own changes, here is a short description, what file does what. First, let's talk about the extensions: 

*.src:: = plain source files 
*.cfg:: = the configuration described in section 4.2 

Now, for the names: 

dload_si.*:: = DreamLoad-SystemIntegrator (sticks all together)
dload.*:: = DreamLoad-Installer
iff.*:: = Drive detection (Identify Friend or Foe)
ldcommon.*:: = Common load routines (C64-side)
ld41.*:: = Special 1541-routines (C64-side)
ldhd.*:: = Special routines for all 2-Mhz-drives (C64-side)
i??.*:: = Initial drive-code for getting the speeder
t??.*:: = Main drive-code

Where "??" means "41" for 1541, "71" for 1570/71, "81" for 1581/CMD FD and "HD" for CMD HD.


Other files involved are:

Makefile:: = useful, if you are a happy owner of 'make' or similar
dload.epr:: = project files for setedit
dload.dst:: = desktop layout for setedit


== Using DreamLoad ==

=== An example of using Dreamload ===

This example is based on the preassembled binary, which is located at ++$8000++. You may also assemble the source yourself without any changes to get the same result. Load it into memory and assemble the listing below to some other place, like ++$c000++.

The file to be loaded is named "test". Keep in mind that the memory configuration (++$01++) must be set to ++$37++ to install DreamLoad.


-----------------------------------------------------------------------------
00 ;--------------------------------------
01
02 DLoad_Install   = $8000
03 LdLoc           = $0500
04
05
06         sta $d07a                       ;1Mhz on a SCPU
07         jsr DLoad_Install               ;install fastloader
08         bcc FastLoadInstallOk           ;success?
09         lda #<Text_FastLoadErr          ;error message
10         ldy #>Text_FastLoadErr
11         jmp $ab1e
12
13 FastLoadInstallOk:
15         lda #FileName_len               ;filename as argument
16         ldx #<FileName
17         ldy #>FileName
18         jsr LdLoc                       ;load the file
19         bcs LoadError                   ;success?
20         jsr LdLoc+15                    ;switch speeder off
21         lda #0                          ;run the file
22         sta $0800
23         jsr $a659
24         jmp $a7ae
25
26 LoadError:
27         lda #2                          ;a simple error message
28         sta $d020
29         rts
30
31
32 Text_FastLoadErr:
33         .PSC "error installing fastload!",13,0
34 FileName:
35         .PSC "test"
36 FileName_len = * - FileName
37
38 ;--------------------------------------
-----------------------------------------------------------------------------

First we have to make sure that the C64 runs with 1Mhz even on a SCPU (line 06).

Now the loader can be installed (line 07). On success the C flag is clear. A set C flag shows an error which is specified more carefully in the akku (see <<func_DLoad_Install,DLoad_Install>> for details).

If the installer succeded the file is loaded (line 15 to 18). The success is again returned in the C flag (see <<func_LoadFile,LoadFile>> for details).

In line 20 the speeder is switched off as we never use the loader again in our little programm. You will only want to do this in your programm right before a quit to basic or a reset.

Line 21 to 24 just run the loaded program.


=== The loader routines in detail ===

[[func_DLoad_Install]]
==== DLoad_Install ====

Installs DreamLoad on a device and starts the code in the drive.

Parameters::
  $ba;;
    device number
Return::
  Carry flag;;
    - clear = success
    - set = error 
  Accu;;
    number of error (only if one occured!)
    - 1 = the device with the number specified in ++$ba++ is turned off
    - 2 = at least one more drive is turned on
    - 3 = the device can not be identified
    - 4 = the device is not (yet) supported 
  X-Reg;;
    type of drive (only on success)
    - 1 = 1541
    - 2 = 1570
    - 3 = 1571
    - 4 = 1581
    - 5 = CMD HD
    - 6 = CMD FD


[[func_LoadFile]]
==== LoadFile ====

(located at LdLoc)

Load a file.

NOTE: This function is only valid for the Load/LoadTS interface and has a different meaning for the Open/Get interface. Please see <<cfg_LdFlag_OpenGetInterface,LdFlag_OpenGetInterface>> for details and <<func_Open,Open>> for the alternative function.

Parameters::
  Accu;;
    Length of the filename
  X;;
    Low byte of pointer to the filename
  Y;;
    High byte of above

  LdZp_PresetAE;;
    *Please Note:* This parameter is only used if ++LdFlag_PresetAE++ was defined at assembly time.
    +
    - $00 to $7f = take load adress from file
    - $80 to $ff = take load adress from LdLAE 
  LdLAE;;
    Load adress for use with LdZp_PresetAE 

Return::
  Carry flag;;
    - clear = success
    - set = error
  Accu;;
    number of error (only if one occured!)
    - 1 = File not found
    - 2 = Read error

  LdLC1;;
    *Please Note:* This value is only valid if ++LdFlag_RememberStart++ was defined at assembly time.
    +
    Start adress of file.


[[func_Open]]
==== Open ====

(located at LdLoc)

Open a file.

NOTE: This function is only valid for the Open/Get interface and has a different meaning for the Load/LoadTS interface. Please see <<cfg_LdFlag_OpenGetInterface,LdFlag_OpenGetInterface>> for details and <<func_LoadFile,LoadFile>> for the alternative function.

Parameters::
  Accu;;
    Length of the filename
  X;;
    Low byte of pointer to the filename
  Y;;
    High byte of above

Return::
  Carry flag;;
    - clear = success
    - set = error
  Accu;;
    number of error (only if one occured!)
    - 1 = File not found
    - 2 = Read error


[[func_LoadTS]]
==== LoadTS ====

(located at LdLoc+3) 

Load a track/sector. Please keep in mind, that the drives supported by DreamLoad may have different track/sector-layouts. So, be sure to keep compatible! The led is switched on and on a 1541/70/71 the motor is turned on. Both can be switched off with LedOff (see <<func_LedOff,LedOff>>).

NOTE: This function is only valid for the Load/LoadTS interface and has a different meaning for the Open/Get interface. Please see <<cfg_LdFlag_OpenGetInterface,LdFlag_OpenGetInterface>> for details and <<func_Get,Get>> for the alternative function.

Parameters::
  X;;
    Track to load
  Y;;
    Sector to load
Return::
  Carry flag;;
    - clear = success
    - set = error

The Track and Sector parameters for this function can be set to a Magic of ++X++=0 and ++Y++=1 to get first directory sector in a drive independent way.

.Get the first directory sector
-----------------------------------------------------------------------------
        ldx #0                  ; magic for first directory sector
        ldy #1
        jsr LdLoc+3
        bcs HandleError
        ; process the directory sector here
-----------------------------------------------------------------------------


[[func_Get]]
==== Get ====

(located at LdLoc+3) 

Get the next byte from an open file. A file can be opened with the <<func_Open,Open>> function.

NOTE: This function is only valid for the Open/Get interface and has a different meaning for the Load/LoadTS interface. Please see <<cfg_LdFlag_OpenGetInterface,LdFlag_OpenGetInterface>> for details and <<func_LoadTS,LoadTS>> for the alternative function.

Parameters::
  none
Return::
  Carry flag;;
    - clear = success
    - set = error or end of file (check accu for details)
  Accu;;
    - if carry is clear: next byte from the file
    - if carry is set: ++$00++ = End of file, all other values are a read error


[[func_ShutUp]]
==== ShutUp ====

(located at LdLoc+6)

Disable loader temporarily, so you can write any value to $DD00 (useful e.g. for some demo effects). Please do not touch $DD02!

Parameters::
  none
Return::
  none


[[func_WakeUp]]
==== WakeUp ====

(located at LdLoc+9)

Reenables DreamLoad after a ShutUp command (see <<func_ShutUp,ShutUp>>).

Parameters::
  none
Return::
  none


[[func_LedOff]]
==== LedOff ====

(located at LdLoc+12)

Switch led off. On a 1541/70/71 also the motor is turned off. If led and motor is already off nothing happens. 

Parameters::
  none
Return::
  none


[[func_SpeederOff]]
==== SpeederOff ====

(located at LdLoc+15)

Switch speeder off. The drive will be ready for normal DOS commands. Give the 1541/70/71 about 2 seconds to reset, other drives are back immediately.

Parameters::
  none
Return::
  none


== Appendix A: Past present and future ==

[[chap_History]]
=== History ===

.Montag auf der TUM, wo Baccy einen Kontaktlinsenlangzeittest macht
- fixed preset LdLAE, thanks to FMan for the bugreport
- remember load address even if it was set by the user
- changed doc language from texinfo to asciidoc


.Dienstag tief im Westen, wo Baccy seinen Adventskalender pluendert
- changed buildsystem from make to jam
- fixed 1571 NTSC speeder, thanks to Hok, Jack Alien and Skern


.Sonntag bei Baccy, der immer noch kein Bett hat
- changed crossassembler from xa to dreamass
- added getbyte interface
- some code beautifying and cleanups
- changed doc language from sgml to texinfo


.Samstach auf der Willow, wo die Belgier das Dosenpfand untergraben
- fixed bug in 1541 speedzone table
- corrected buffersize for cmd fd command buffer (did not cause problems, but for completeness... :)
- corrected check for additional drives
- shortened some bytes (again ;)
- header speed is now on the *very* safe side without serious loss of speed
- added some tips to the docs


.Montag bei Baccy, der nach der X fast auffer Arbeit eingeschlafen ist
- improved reliability for all drives (yes, we optimized a bit too much :)
- squeezed some bytes out of the installer


.Freitag bei Grampa, wo Kolibris auf Disneyland scheissen und Oppossums an Zitronen knabbern (und wir auch)
- verified ntsc-compatibility
- saved dozens of bytes and cycles (especially in t71)
- shutup and wakeup-routines
- documentation!
- ill. track/sector detect 81/fd


.Sonntag bei Baccy, der jetzt beim Chinamann was futtern geht
- recognition of diskchange
- speed improvements for 41
- ill. track/sector detect for 41/71/hd


.Montag bei Ninja seiner Schwester, die Ute
- VIC-banks are now switchable using $dd02. Do not touch $dd00
- Parameter for Load: A = Filename length, X/Y = Pointer to filename
- now possible to load directly from Track/Sector (X/Y 
- NTSC Fix (alpha)
- Fix in FD-loader
- HD-Speeder now runs on all devices (I hope :)
- speed improvements for HD/FD/81
- 1571-native loader!


[[chap_ToDo]]
=== ToDo ===

These are our plans for future versions of DreamLoad:

- support more drives (ide64)
- find a nice (and fast!) solution to work with more than one drive on the serial bus

##...and your ideas! :)##

