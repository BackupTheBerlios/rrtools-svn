\input texinfo.tex    @c -*-texinfo-*-

@setfilename dreamload
@setchapternewpage off
@paragraphindent none

@syncodeindex vr cp
@syncodeindex pg cp


@set VERSION 2.6
@set UPDATED 2005-12-20

@settitle DreamLoad @value{VERSION}

@paragraphindent 0
@c finalout

@shorttitlepage DreamLoad

@titlepage
@title DreamLoad
@subtitle API documentation and hacking instructions
@subtitle for DreamLoad version @value{VERSION}, @value{UPDATED}

@author Doc Bacardi
@author Ninja


@c Include the Distribution inside the titlepage so
@c that headings are turned off.

@page
@vskip 0pt plus 1filll

@end titlepage

@contents


@node Top
@top DreamLoad

@menu

* Preface::
* How to get DreamLoad::
* General overview::
* How to assemble DreamLoad::
* Needed tools::
* Customizing DreamLoad::
* Assembling DreamLoad::
* Modifying DreamLoad::
* Using DreamLoad::
* Past present and future::
* Index::

@end menu


@node Preface
@chapter Preface
@cindex Preface

DreamLoad is a 2 bit IRQ fastloader for these drives:
@itemize @asis
@item 1541 and compatible
@item 1570/71 (native)
@item 1581
@item cmd fd
@item cmd hd
@end itemize
@sp 1

Some Goodies:
@itemize @bullet
@item works on pal and ntsc machines
@item supports double sided disks on the 1571
@item loads from sub-partitions on the 1581 and sub-directories on cmd fd and hd
@item detects disk changes without ignoring id mismatch errors
@item recognizes illegal tracks and sectors
@item uses full 16-char filenames, supports joker ("*","?")
@item can directly load from a track/sector
@item can be temporarily disabled
@item the device number can be 8 to 30
@item easy to combine with levelpackers
@item open source (happy hacking :)
@end itemize
@sp 1

...and some flaws:
@itemize @bullet
@item It can only work with one drive on the serial line as it uses ATN for handshake. So please be sure to turn off all drives except the one you want to work with.
@item Of course, 1541/70/71 loading speed depends on the sector interleave
@end itemize
@sp 2

This text describes V@value{VERSION}.  You can find our plans for the future in @ref{ToDo}. @ref{How to assemble DreamLoad}, describes how to build your own customized version of DreamLoad. A summary of all provided routines can be found in @ref{Using DreamLoad}. All chapters are listed in the @ref{Index}.
@sp 1

DreamLoad is quite stable but though still under development.@*
So if you find any bugs or have nice ideas please contact us:
@itemize
@item @email{DocBacardi@@the-dreams.de, DocBacardi}
@item @email{ninja@@the-dreams.de, Ninja}
@end itemize
@sp 1

These are the tools we use to develop DreamLoad:
@itemize
@item the crossassembler @uref{http://people.freenet.de/LittleDreamLand/dreamass/index.html, DreamAss},
@item the development environment @uref{http://setedit.sourceforge.net, SetEdit},
@item the FreeType version of jam, @uref{http://freetype.sourceforge.net/jam/, ftjam},
@item @uref{http://www.ktverkko.fi/~msmakela/8bit/cbmconvert/index.en.html, cbmconvert} by Marko Mäkelä,
@item @uref{http://web.comhem.se/~u13114991/exo/, exomizer} by Magnus Lind,
@item @uref{http://www.cs.tut.fi/~albert/Dev/pucrunch/, pucrunch} by Pasi Ojala
@end itemize
@sp 2

Doc Bacardi and Ninja
@sp 1

@include dreamslogo.texi


@node How to get DreamLoad, General overview, Preface, Top
@chapter How to get DreamLoad
@cindex How to get DreamLoad

The latest source can be found in
@uref{http://people.freenet.de/LittleDreamLand/dload/index.html, Baccy's little DreamLand}.


@node General overview, How to assemble DreamLoad, How to get DreamLoad, Top
@chapter General overview
@cindex General overview

DreamLoad consists of 3 parts. The first one is the installer (the file you
get by assembling the sources). It determines what type of drive is connected
to the C64. According to this, the installer transfers the second part of the
loader;  the code which runs in the drive.  It is immediately started.
Finally the installer copies the loader code running on the C64 to a defined
memory location. The loader can be used immediately after installing it.
There's no need for a delay loop afterwards.

As you see, the drive-detection is done during run-time, meaning your
production can be file-copied to any supported drive and will still work
without any modification of the program.


@node How to assemble DreamLoad, Needed tools, General overview, Top
@chapter How to assemble DreamLoad
@cindex How to assemble DreamLoad

Although we provide preassembled binaries we recommend building your own
version. The DreamLoad source can be customized in a few steps for you special
needs.


@node Needed tools, Customizing DreamLoad, How to assemble DreamLoad, Top
@section Needed tools
@cindex Needed tools


To build DreamLoad you need
@table @code
@item DreamAss
Get the sourcecode or a precompiled binary for Windows from @uref{http://people.freenet.de/LittleDreamLand/dreamass/index.html}.
@item ftjam
The Source and a Windows binary is available at @uref{http://freetype.sourceforge.net/jam/}. Most Linux distributions provide a binary package.
@end table
@sp 1

Optional
@table @code
@item cbmconvert
for the disk and lynx images in the demo directories, @uref{http://www.ktverkko.fi/~msmakela/8bit/cbmconvert/index.en.html}
@item exomizer
for the decrunch demos, @uref{http://web.comhem.se/~u13114991/exo/}
@item pucrunch
for the decrunch demos, @uref{http://www.cs.tut.fi/~albert/Dev/pucrunch/}
@end table


@node Customizing DreamLoad, Assembling DreamLoad, Needed tools, Top
@section Customizing DreamLoad
@cindex Customizing DreamLoad

Grab your favourite editor and open one of the 'dload.cfg' files in the demo directories.@*
At the top of the file you will find the line
@sp 1

@example
LdCfgInitCodeStart = $8000
@end example
@sp 1
This defines the start adress of the installer. Replace the '$8000' by the adress of youe choice.
@sp 2

The installer needs 7 zeropage adresses. They are used only temporarily and can be overwritten after the installer is done.@*
This line specifies where the 7 bytes are placed. $40 means the zeropage adresses from $40 to $46 are used.
@sp 1
@example
LdCfgInitZPStart = $40
@end example
@sp 2

The next entry is the version of the configuration. No need for changes here.
@example
 LdCfgVer                = $0204         ;Config Version
@end example
@sp 2

Dreamload offers 2 ways to access files. The Load/LoadTS interface can load a complete file or separate sectors.
The Open/Get interface can access a file byte-by-byte, just like the open and get routines of the c64's basic.@*
The interfaces are mutually exclusive, you can only choose one.@*
If you want to use the Open/Get interface instead of Load/LoadTS, remove the
leading semicolon from this line:
@sp 1
@example
;LdFlag_OpenGetInterface = 1
@end example
@sp 2

If you need to keep the startadress of the loaded file in a zeropage adress,
remove the leading semicolon in this line:
@sp 1
@example
;#define LdFlag_RememberStart
@end example
@sp 2

DreamLoad uses a little trick to keep the bits for the vic bank out of $dd00.
They are controlled by $dd02 now.@*
You can initialize $dd00 and have DreamLoad set $dd02 to the right value. This
is the default action.@*
But this will not work if you need to change the vic bank during loading. In
this case you have to set $dd02 on your own and prepend a semicolon to this
line:
@sp 1
@example
#define LdFlag_SetDD02
@end example
@sp 1
Example for setting $dd02:
@example
        lda #%......xy
        sta $dd00
@end example
becomes
@example
        lda #0                  ;only once in your init routine
        sta $dd00               ;don't do this while loading

        lda #($3f EOR %xy)      ;the new substitute for setting the vic
        sta $dd02               ;bank to %xy
@end example
@sp 2

By default the loader takes the first two bytes of a file as the loading adress.@*
If you remove the leading semicolon of this line
@sp 1
@example
;#define LdFlag_PresetAE
@end example
@sp 2

DreamLoad checks the zero page location 'LdZp_PresetAE'.@*
If it is positive ($00 to $7f) the loading adress is taken from the file like
described above.@*
If it is negative ($80 to $ff) the loading adress is taken from the zero page
location 'LdLAE'.
@sp 2

To speed up the code loading below I/O is not supported by default. Remove the
leading semicolon in this line to enable loading from $d000 to $e000:
@sp 1
@example
;#define LdFlag_LoadBelowIO
@end example
@sp 1
When you enable this function, please take care of the following: DreamLoad will then change the memory-config often
while loading. So, make sure that your interrupts backup and restore $01!
@sp 2


The next entry defines which vic bank is displayed while the installer runs.@*
It's a number from 0 to 3, the same you would store to $DD00 with
@example
        lda #%......xy
        sta $DD00
@end example
@sp 1
The default value is 3 which selects vic bank 0 ($0000-$3fff).
@sp 1
@example
LdFlag_VicBank          = 3
@end example
@sp 2

For some applications it is more important to save some bytes than getting the best loading speeds.
Remove the leading semicolon in this line to use the 1541 speeder for both 1570 and 1571 drives.
This saves about 320 bytes for the installer. The memory usage after the installer does not depend on this option.
@sp 1
@example
;LdFlag_7Xis41 = 1
@end example
@sp 2

The next options define the memory locations to use, which can also be changed to your own needs, of course:
@sp 2
LdLAE has two functions:@*
It can be used to pass the loading adress to DreamLoad and@*
it contains the last used adress +1 after a successful load.@*
The size is 2 if LdFlag_BigPtrs is disabled, 3 otherwise.
@sp 1
@example
LdLAE                  = $ae
@end example
@sp 2

If you enabled the flag LdFlag_RememberStart and the loading adress is taken
from the file the loading adress is put into this zero page location.@*
It uses 2 bytes. It is not used or modified if the loading adress is taken
from LdLAE.
@sp 1
@example
LdLC1                  = $c1
@end example
@sp 2

DreamLoad needs two bytes of workspace. They can be located anywhere in the
zeropage. They do not need to be together.
@sp 1
@example
LdGZp                  = $02
LdChk                  = $57
@end example
@sp 2

To load a sector, a buffer of 256 bytes is needed. It should begin at the
start of a page.
@sp 1
@example
LdBf                   = $0400
@end example
@sp 2

The loader code is max. 2 pages (512 bytes) long. It will be copied to LdLoc.@*
LdLoc must not be placed from $d000 to $e000.
@sp 1
@example
LdLoc                   = $0500
@end example
@sp 2


@node Assembling DreamLoad, Modifying DreamLoad, Customizing DreamLoad, Top
@section Assembling DreamLoad
@cindex Assembling DreamLoad

If you are lucky and have @samp{make} on your system just type @code{make} in the
directory containing the DreamLoad sources. Otherwise
@sp 1
@example
dreamass -o dload.c64 dload_si.src
@end example
will do the same.
@sp 1
The produced binary will be called 'dload.c64'.


@node Modifying DreamLoad, Using DreamLoad, Assembling DreamLoad, Top
@section Modifying DreamLoad
@cindex Modifying DreamLoad

If you want to make your own changes, here is a short description, what file
does what. First, let's talk about the extensions:
@table @code
@item *.src
= plain source files
@item *.cfg
= the configuration described in section 4.2
@end table
@sp 1

Now, for the names:
@table @code
@item dload_si.* 
= DreamLoad-SystemIntegrator (sticks all together)
@item dload.* 
= DreamLoad-Installer
@item iff.* 
= Drive detection (Identify Friend or Foe)
@item ldcommon.* 
= Common load routines (C64-side)
@item ld41.* 
= Special 1541-routines (C64-side)
@item ldhd.* 
= Special routines for all 2-Mhz-drives (C64-side)
@item i??.* 
= Initial drive-code for getting the speeder
@item t??.* 
= Main drive-code
@end table
@sp 1

Where "??" means "41" for 1541, "71" for 1570/71, "81" for 1581/CMD FD and "HD" for CMD HD.
@sp 1

Other files involved are:
@table @code
@item Makefile
= useful, if you are a happy owner of 'make' or similar
@item dload.epr
= project files for setedit
@item dload.dst
= desktop layout for setedit
@end table



@node Using DreamLoad, Past present and future, Modifying DreamLoad, Top
@chapter Using DreamLoad
@cindex Using DreamLoad

@menu
* An example of using Dreamload::
* The loader routines in detail::
@end menu


@node An example of using Dreamload
@section An example of using Dreamload
@cindex An example of using Dreamload

This example is based on the preassembled binary, which is located at $8000.@*
You may also assemble the source yourself without any changes to get the same
result. Load it into memory and assemble the listing below to some other
place, like $c000.
@sp 1

The file to be loaded is named 'test'. Keep in mind that mem-config ($01) must be set to $37 to install DreamLoad.
@example
00 ;--------------------------------------
01
02 DLoad_Install   = $8000
03 LdLoc           = $0500
04
05
06         sta $d07a                       ;1Mhz on a SCPU
07         jsr DLoad_Install               ;install fastloader
08         bcc FastLoadInstallOk           ;success?
09         lda #<Text_FastLoadErr          ;error message
10         ldy #>Text_FastLoadErr
11         jmp $ab1e
12
13 FastLoadInstallOk:
15         lda #FileName_len               ;filename as argument
16         ldx #<FileName
17         ldy #>FileName
18         jsr LdLoc                       ;load the file
19         bcs LoadError                   ;success?
20         jsr LdLoc+15                    ;switch speeder off
21         lda #0                          ;run the file
22         sta $0800
23         jsr $a659
24         jmp $a7ae
25
26 LoadError:
27         lda #2                          ;a simple error message
28         sta $d020
29         rts
30
31
32 Text_FastLoadErr:
33         .PSC "error installing fastload!",13,0
34 FileName:
35         .PSC "test"
36 FileName_len = * - FileName
37
38 ;--------------------------------------
@end example
@sp 1

First we have to make sure that the C64 runs with 1Mhz even on a SCPU (line 06).@*
Now the loader can be installed (line 07). On success the C flag is clear.@*
A set C flag shows an error which is specified more carefully in the akku (see 5.2 for details).@*
If the installer succeded the file is loaded (line 15 to 18). The success is again returned in the C flag.@*
In line 20 the speeder is switched off as we never use the loader again in our
little programm. You will only want to do this in your programm right before a
'quit to basic' or a reset.@*
Line 21 to 24 just run the loaded program.


@node The loader routines in detail
@section The loader routines in detail
@cindex The loader routines in detail

@menu
* DLoad_Install::
* LoadFile::
* LoadTS::
* ShutUp::
* WakeUp::
* LedOff::
* SpeederOff::
@end menu


@node DLoad_Install
@subsection DLoad_Install
@cindex DLoad_Install

Installs DreamLoad on a device and starts the code in the drive.
@table @asis
@item Parameters
@item @indent @code{$ba}
device number
@item
@item Return
@item @indent @code{Carry flag}
0 = success@*
1 = error
@item @indent @code{Accu}
number of error (only if one occured!)@*
1 = the device with the number specified in $ba is turned off@*
2 = at least one more drive is turned on@*
3 = the device can not be identified@*
4 = the device is not (yet) supported
@item @indent @code{X-Reg}
type of drive (only on success)@*
1 = 1541@*
2 = 1570@*
3 = 1571@*
4 = 1581@*
5 = CMD HD@*
6 = CMD FD
@end table


@node LoadFile
@subsection LoadFile
@cindex LoadFile

(located at LdLoc)
@sp 1

Load a file.
@table @asis
@item Parameters
@item @indent @code{Accu}
Length of the filename
@item @indent @code{X}
Low byte of pointer to the filename
@item @indent @code{Y}
High byte of above
@item
@item Only if LdFlag_PresetAE was defined at assembly time:
@item @indent @code{LdZp_PresetAE}
$00 to $7f = take load adress from file@*
$80 to $ff = take load adress from LdLAE
@item @indent @code{LdLAE}
Load adress for use with LdZp_PresetAE
@item
@item Return
@item @indent @code{Carry flag}
0 = success@*
1 = error
@item @indent @code{Accu}
number of error (only if one occured!)@*
1 = File not found@*
2 = Read error
@item Only if LdFlag_RememberStart was defined at assembly time and the loading adress is taken from the file (and not LdLAE):
@item @indent @code{LdLC1}
Start adress of file
@end table


@node LoadTS
@subsection LoadTS
@cindex LoadTS

(located at LdLoc+3)
@sp 1
Load a track/sector. Please keep in mind, that the drives supported by
DreamLoad may have different track/sector-layouts. So, be sure to keep
compatible! The led is switched on and on a 1541/70/71 the motor is turned on.
Both can be switched off with LedOff (see @ref{LedOff}).

@table @asis
@item Parameters
@item @indent @code{X}
Track to load
@item @indent @code{Y}
Sector to load
@item
@item Magic
@item @indent @code{X=0, Y=1}
Get first dir-sector
@item
@item Return
@item @indent @code{Carry flag}
0 = success@*
1 = error
@end table


@node ShutUp
@subsection ShutUp
@cindex ShutUp

(located at LdLoc+6)
@sp 1
Disable loader temporarily, so you can write any value to $DD00 (useful e.g.
for some demo effects). Please do not touch $DD02!

@table @asis
@item Parameters
@item @indent none
@item
@item Return
@item @indent none
@end table


@node WakeUp
@subsection WakeUp
@cindex WakeUp

(located at LdLoc+9)
@sp 1
Reenables DreamLoad after a ShutUp command (@ref{ShutUp}).

@table @asis
@item Parameters
@item @indent none
@item
@item Return
@item @indent none
@end table


@node LedOff
@subsection LedOff
@cindex LedOff

(located at LdLoc+12)
@sp 1
Switch led off. On a 1541/70/71 also the motor is turned off.@*
If led and motor is already off nothing happens.

@table @asis
@item Parameters
@item @indent none
@item
@item Return
@item @indent none
@end table


@node SpeederOff
@subsection SpeederOff
@cindex SpeederOff

(located at LdLoc+15)
@sp 1
Switch speeder off. The drive will be ready for normal DOS commands. Give the
1541/70/71 about 2 seconds to reset, other drives are back immediately.

@table @asis
@item Parameters
@item @indent none
@item
@item Return
@item @indent none
@end table


@node Past present and future
@appendix Past present and future
@cindex Past present and future

@menu
* History::
* ToDo::
@end menu

@node History
@section History
@cindex History

@include history.texi

@node ToDo
@section ToDo
@cindex ToDo

These are our plans for future versions of DreamLoad:
@sp 1
@itemize
@item support more drives (ide64)
@item find a nice (and fast!) solution to work with more than one drive on the serial bus
@end itemize
...and your ideas! :)


@node Index, , Past present and future, Top
@unnumbered Concept Index
@cindex Index

@printindex cp

@bye

