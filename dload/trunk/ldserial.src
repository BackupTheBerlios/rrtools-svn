
;--------------------------------------

LdSerialPsyStart:
    .PSEUDOPC LdCommonEnd

;--------------------------------------

@0LdSerial_LedOff:
        ldy #2
        .DB $2c
@0LdSerial_SwitchOff:
        ldy #0
#ifdef LdFlag_SetDD02
        jsr SetDD02
#endif
        ldx #0
PatchCommon_SendH0:
#ifdef LdFlag_SetDD02
        jsr LdSerial_LdSendH
        jmp UnSetDD02
#else
        jmp LdSerial_LdSendH
#endif

;--------------------------------------

@0LdSerial_ShutUp:
#ifdef LdFlag_SetDD02
	lda LdHostDp
	ora #Serial_Data
	and #~Serial_Clk
	sta LdHostDp
ShutUp0:
	bit LdHostDp
	bvc ShutUp0
	eor #Serial_Data|Serial_Clk
	sta LdHostDp
#else
	lda #Serial_Data
	sta LdHostDp
ShutUp0:
	bit LdHostDp
	bvc ShutUp0
	lda LdHostDdr
	and #3
	eor #Serial_clk|3	; so nicht portierbar!
	sta LdHostDp
#endif
	jsr ShutUp1
        lda #3
        sta LdHostDdr
ShutUp1:
        rts

;--------------------------------------

@0LdSerial_WakeUp:
	lda LdHostDp
	ora #Serial_Clk
	sta LdHostDp
	and #3
	eor #$3f
	sta LdHostDdr
	ldx #0
	ldy #2
#ifdef LdFlag_SetDD02
	jsr SendHJumpIn
	jmp UnSetDD02
#else
        bne SendHJumpIn
#endif

@0LdSerial_LdSendH:
	lda #Serial_Data
	sta LdHostDp
SendH0:
	bit LdHostDp
	bvc SendH0
SendHJumpIn:
	txa
	jsr LdSerial_SendByte
	tya

@0LdSerial_SendByte:
	sta LdGZp
	ldx #3
SendNibble:
	asl LdGZp
	lda #$80
	ror
	lsr
	lsr
	sta LdHostDp
	jsr LdSerial_CSRts
	asl LdGZp
	lda #$00
	ror
	lsr
	lsr
	sta LdHostDp
	jsr LdSerial_CSRts
	dex
	bpl SendNibble
	jsr LdSerial_CSRts	; ldx #10, dex, bpl
	jsr LdSerial_CSRts
	jsr LdSerial_CSRts
	jsr LdSerial_CSRts
LdSerial_CSRts:
	; LedOff and thus LdSerial_CSRts must return carry clear!
	clc
	rts

LdSerial_Error:
	sec
	rts

;--------------------------------------

LdSerialEnd:
    .REALPC
LdSerialPsyEnd:

