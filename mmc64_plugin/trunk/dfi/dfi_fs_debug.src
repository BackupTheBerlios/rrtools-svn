;--------------------------------------
;
; DFI Fs for MMC 64 and RetroReplay
;
; *** DEBUG Version ***
;
;--------------------------------------

#segdef "bank0", $a000-$c000, fillup, force, $00
#segdef "bank1", $c100-$ce00, fillup, force, $00
#segdef "bank2", $ce00-$ee00, fillup, force, $00
#segdef "switcher", $c000-$c100, fillup, force, $00

#outfile @, startadr, $00, "bank0", "switcher", "bank1", "bank2"

;--------------------------------------
; this is the offset for bank2 in the bin image

__OUTFILE_BANK2_OFFSET__ = 0

;--------------------------------------

	.segment "bank0"
	* = $a000

	.segment "bank1"
	* = $c100

	.segment "bank2"
	* = $ce00
	__SEGMENT_BANK2_LIMIT__ = $ee00

	.segment "switcher"
	* = $c000

; only export global variables
    .(

;--------------------------------------

DfiFs_Cfg_NumberOfBuffers = 4
; the normal buffers are followed by the directory and system buffer
DfiFs_Cfg_DirBufferIdx = DfiFs_Cfg_NumberOfBuffers
DfiFs_Cfg_BamBufferIdx = DfiFs_Cfg_NumberOfBuffers+1
DfiFs_Cfg_SysBufferIdx = DfiFs_Cfg_NumberOfBuffers+2

DfiFs_DEBUG_FLICKER = 1

DfiFs_DEBUG_Bank2IsC64Ram = 1

;--------------------------------------

#include "struct.src"

#include "dfi_fs_error_numbers.src"


DfiFs_BufferMode_Closed = 0
DfiFs_BufferMode_ReadFile = 1
DfiFs_BufferMode_WriteFile = 2
DfiFs_BufferMode_ReadDir = 3
DfiFs_BufferMode_ReplaceFile = 4

DfiFs_ReadDirState_Files = 0
DfiFs_ReadDirState_BlocksFree = 1
DfiFs_ReadDirState_End = 2

;--------------------------------------

; $a3 - $a5 are used by disk routines, use them for zp

DfiFsZp_BufPtr			= $a3		; word pointer for buffer
DfiFsZp_ByteBuffer		= $a5		; one byte buffer for read/write operations

;--------------------------------------

#macro bankJsr(dst)	{jsr {dst}}

#macro setBank(bank, val)
{
	__CURRENT_BANK__ := {bank}
	__CURRENT_BANK_CFG__ := {val}
}

#macro defBankJumpLabel(labelname, value, banknr, bankcfg)
{
	@0BANK{banknr}_{labelname} = {value}
	@0L_{labelname} = {value}
}

#macro defBJL(name)
{
	.defBankJumpLabel({name}, *, __CURRENT_BANK__, __CURRENT_BANK_CFG__)
}

;--------------------------------------

#include "dfi_fs_switcher_debug.src"

;--------------------------------------

	.segment "bank0"

Kernal_f30f:
	php
	inc $01
	plp
	jsr $f30f
	php
	dec $01
	plp
	rts

Kernal_f314:
	php
	inc $01
	plp
	jsr $f314
	php
	dec $01
	plp
	rts

Kernal_f31f:
	php
	inc $01
	plp
	jsr $f31f
	php
	dec $01
	plp
	rts

Kernal_f233:
	php
	inc $01
	plp
	jsr $f233
	php
	dec $01
	plp
	rts

Kernal_f275:
	php
	inc $01
	plp
	jsr $f275
	php
	dec $01
	plp
	rts

Kernal_fb8e:
	php
	inc $01
	plp
	jsr $fb8e
	php
	dec $01
	plp
	rts

Kernal_fcd1:
	php
	inc $01
	plp
	jsr $fcd1
	php
	dec $01
	plp
	rts

Kernal_fcdb:
	php
	inc $01
	plp
	jsr $fcdb
	php
	dec $01
	plp
	rts

Kernal_fe1c:
	php
	inc $01
	plp
	jsr $fe1c
	php
	dec $01
	plp
	rts

jsrToRom:
	php
	php
	php
	sta exitToRom_saveA+1
	stx exitToRom_saveX+1
	sty exitToRom_saveY+1

	; get the return address
	tsx
	lda #<(switch_rom_bank0_save01-1)
	sta $0102,x
	lda #>(switch_rom_bank0_save01-1)
	sta $0103,x

	clc
	lda $0104,x
	sta exitToRom_Hi+1
	adc #2
	sta $0104,x
	lda $0105,x
	sta exitToRom_Hi+2
	adc #0
	sta $0105,x

	; correct the stack pointer
	pla
	tay

	; get the word behind the calling jsr
	ldx #2
	jmp exitToRom_Hi

;--------------------------------------

exitToRom:
    .(
	; save flags and registers
	php
	sta exitToRom_saveA+1
	stx exitToRom_saveX+1
	sty exitToRom_saveY+1

	; get the return address
	tsx
	lda $0102,x
	sta exitToRom_Hi+1
	lda $0103,x
	sta exitToRom_Hi+2

	; correct the stack pointer
	pla
	tay
	pla
	pla

	; get the word behind the calling jsr
	ldx #2
	jmp exitToRom_Hi
    .)

;--------------------------------------

#include "dfi_fs_bank0.src"
#include "dfi_fs_bank1.src"
#include "dfi_fs_bank2.src"

;--------------------------------------

    .)

