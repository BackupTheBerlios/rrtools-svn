;--------------------------------------
; DFI tester for REU
;
; by Doc Bacardi/DRM
;--------------------------------------

#segdef "zp", $57-$71
#segdef "code", $0801-$a000

#outfile @, startadr, sort, $00, "code"

;--------------------------------------

	.segment "code"

	* = $0801

    .(          ; BasicStart
	.DW BasicEnd, 2006
	.DB $9e

	.DB '0'|((BasicJumpIn-(BasicJumpIn/100000)*100000)/10000)
	.DB '0'|((BasicJumpIn-(BasicJumpIn/10000)*10000)/1000)
	.DB '0'|((BasicJumpIn-(BasicJumpIn/1000)*1000)/100)
	.DB '0'|((BasicJumpIn-(BasicJumpIn/100)*100)/10)
	.DB '0'|(BasicJumpIn-(BasicJumpIn/10)*10)

;	.PET " baccy/drm"
	.DB 0
BasicEnd:
	.DW 0
    .)          ; BasicStart

;--------------------------------------

dfi_fs_bank0_start:
	.binclude "bank0.bin"
dfi_fs_bank1_start:
	.binclude "bank1.bin"

#include "bank01.lab"

;--------------------------------------

BasicJumpIn:
	sei

	lda #$22
	sta $de00
	ldx #0
delay0:
	nop
	inx
	bne delay0

	; copy the main code to $8000
	ldx #$20
copyMainCode:
	lda dfi_fs_bank0_start,y
	sta $8000,y
	iny
	bne copyMainCode
	inc copyMainCode+2
	inc copyMainCode+5
	dex
	bne copyMainCode

	jsr BANK0_DfiFs_REU_Init

	; install copy code
	ldx #copy_code_len-1
installCopyCode:
	lda copy_code_start_psy,x
	sta copy_code_start,x
	dex
	bpl installCopyCode
	jsr copy_code_start

	; patch the load/save/open/get vectors
	lda #<DfiFs_Open
	sta $031a
	lda #>DfiFs_Open
	sta $031b

	lda #<DfiFs_Close
	sta $031c
	lda #>DfiFs_Close
	sta $031d

	lda #<DfiFs_ChangeKernalInput
	sta $031e
	lda #>DfiFs_ChangeKernalInput
	sta $031f

	lda #<DfiFs_ChangeKernalOutput
	sta $0320
	lda #>DfiFs_ChangeKernalOutput
	sta $0321

	lda #<DfiFs_ClearChannels
	sta $0322
	lda #>DfiFs_ClearChannels
	sta $0323

	lda #<DfiFs_CharIn
	sta $0324
	lda #>DfiFs_CharIn
	sta $0325

	lda #<DfiFs_CharOut
	sta $0326
	lda #>DfiFs_CharOut
	sta $0327

	lda #<DfiFs_GetIn
	sta $032a
	lda #>DfiFs_GetIn
	sta $032b

	lda #<DfiFs_Load
	sta $0330
	lda #>DfiFs_Load
	sta $0331

	lda #<DfiFs_Save
	sta $0332
	lda #>DfiFs_Save
	sta $0333

	cli
	rts


copy_code_start_psy:
	.PSEUDOPC $0340
copy_code_start:
	; always transfer a full page
	ldx #$20

copyDfiFsCode0:
	ldy #0
copyDfiFsCode1:
	lda $8000,y
	sta $0400,y
	iny
	bne copyDfiFsCode1

	; switch to bank 0, ram
	ldy #$80|$00|$23
	jsr switchToBank

	ldy #0
copyDfiFsCode2:
	lda $0400,y
	sta $8000,y
	iny
	bne copyDfiFsCode2

	ldy #$22
	jsr switchToBank

	ldy #0
copyDfiFsCode3:
	lda dfi_fs_bank1_start,y
	sta $0400,y
	iny
	bne copyDfiFsCode3

	; switch to bank 1, ram
	ldy #$80|$08|$23
	jsr switchToBank

	ldy #0
copyDfiFsCode4:
	lda $0400,y
	sta $8000,y
	iny
	bne copyDfiFsCode4

	ldy #$22
	jsr switchToBank

	inc copyDfiFsCode1+2
	inc copyDfiFsCode2+5
	inc copyDfiFsCode3+2
	inc copyDfiFsCode4+5
	dex
	bne copyDfiFsCode0
	rts

switchToBank:
	tya
	sta $de00
	eor $de00
	and #$98
	bne switchToBank
	rts

	.REALPC
copy_code_len = * - copy_code_start_psy

;--------------------------------------
